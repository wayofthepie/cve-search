{-# LANGUAGE DeriveAnyClass #-}
{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ScopedTypeVariables #-}
module Main where

import Control.Monad ((<=<))
import Data.Default
import Database.Bolt
import Web.Spock hiding (head)
import Web.Spock.Config
import System.Remote.Monitoring

import CveSearch

type ApiAction ctx a = SpockActionCtx ctx Pipe () () a

main :: IO ()
main  = do
  spockCfg <- defaultSpockCfg () (PCConn neoConnBuilder) ()
  _ <- forkServer "localhost" 8000
  runSpock 8080 (spock spockCfg app)

-- | Neo4j connection builder.
neoConnBuilder :: ConnBuilder Pipe
neoConnBuilder = ConnBuilder
  { cb_createConn = connect conf
  , cb_destroyConn = close
  , cb_poolConfiguration = neoPoolConf
  }

-- | Neo4j connection pool configuration.
neoPoolConf :: PoolCfg
neoPoolConf = PoolCfg
  { pc_stripes = 10
  , pc_resPerStripe = 5
  , pc_keepOpenTime = 10
  }

-- | Default bolt credentials for our test instance.
conf :: BoltCfg
conf = def { user = "neo4j", password = "test", host = "192.168.1.3"}

-- | Routes that define our app.
app :: SpockM Pipe () () ()
app = do
  get root $ text "Nothing here!"
  post "/cve/summary/search" $ do
    SearchQuery reg _ sk lim yr <- jsonBody' :: ApiAction ctx SearchQuery
    json <=< runQuery $ \pipe -> run pipe $
      cveSearchBySummary yr (Skip sk) (Limit lim) reg
