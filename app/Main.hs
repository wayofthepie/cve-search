{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ScopedTypeVariables #-}
module Main where

import Control.Monad ((<=<))
import Data.Default
import Data.Map as M
import qualified Data.Text as T
import Database.Bolt
import Web.Spock hiding (head)
import Web.Spock.Config
import Debug.Trace

main :: IO ()
main  = do
  spockCfg <- defaultSpockCfg () (PCConn neoConnBuilder) ()
  runSpock 8080 (spock spockCfg app)

neoConnBuilder :: ConnBuilder Pipe
neoConnBuilder = ConnBuilder
  { cb_createConn = connect conf
  , cb_destroyConn = close
  , cb_poolConfiguration = neoPoolConf
  }

neoPoolConf :: PoolCfg
neoPoolConf = PoolCfg
  { pc_stripes = 2
  , pc_resPerStripe = 2
  , pc_keepOpenTime = 10
  }

conf :: BoltCfg
conf = def { user = "neo4j", password = "test" }

app :: SpockM Pipe () () ()
app = do
  get root $ text "Hello World!"
  get ("/cve/summary/search" <//> var) $ \summaryContents -> do
    v <- runQuery $ \pipe -> run pipe $ querySearch summaryContents
    json v

toNode :: Monad m => Record -> m Node
toNode r = r `at` "n" >>= exact

querySearch :: T.Text -> BoltActionT IO [(T.Text, T.Text)]
querySearch regex = do
  records <- queryP cypher (fromList [("text", T regex)])
  mapM (getSummaryAndId <=< toNode) records
 where
  cypher = "MATCH (n:CVE) where n.summary =~ {text} RETURN n"
  atKey node key = exact (nodeProps node ! key)
  getSummaryAndId node = (,) <$> node `atKey` "cveId" <*> node `atKey` "summary"
